/**
 * @fileoverview Firestore Security Rules for the water billing application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control system, where 'admin' users have elevated privileges to manage users and data,
 * while other roles ('petugas' and 'user') have more restricted access.  User data is primarily secured via role.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  User profiles are readable by admins, and writable by admins.
 * - /payments/{paymentId}: Stores payment records. Readable and writable by admins.
 * - /meterReadings/{readingId}: Stores meter reading records. Readable and writable by admins.
 *
 * Key Security Decisions:
 * - User listing is allowed for admins only.
 * - Non-admin users cannot create, update or delete other user profiles.
 * - Schema validation is relaxed to allow for rapid prototyping, focusing on role-based authorization.
 *
 * Denormalization for Authorization:
 *  -  User roles are stored directly in the `/users/{userId}` document to avoid needing a separate collection and extra reads for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if a user is signed in
     * @return {boolean}
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document based on the user ID.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user has the admin role.
     * @return {boolean} True if the user has the admin role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user exists and the requesting user is the owner of the document based on the user ID.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} - True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get) Admin can get any user profile.
     * @deny (create) Non-signed-in user cannot create a profile.
     * @deny (update) Non-admin user cannot update other user profiles.
     * @principle Enforces user ownership for profile creation and admin control for management.
     */
    match /users/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin() ;
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for payments.
     * @path /payments/{paymentId}
     * @allow (create) Admin can create a payment record.
     * @allow (get) Admin can get any payment record.
     * @deny (create) Non-admin user cannot create a payment record.
     * @deny (update) Non-admin user cannot update payment records.
     * @principle Restricts payment management to admin users.
     */
    match /payments/{paymentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for meter readings.
     * @path /meterReadings/{readingId}
     * @allow (create) Admin can create a meter reading record.
     * @allow (get) Admin can get any meter reading.
     * @deny (create) Non-admin user cannot create a meter reading record.
     * @deny (update) Non-admin user cannot update meter readings.
     * @principle Restricts meter reading management to admin users.
     */
    match /meterReadings/{readingId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}