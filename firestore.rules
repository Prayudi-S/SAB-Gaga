rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data. Users can only read their own profile.
     * @path /users/{userId}
     * @allow (get) Authenticated user requesting their own profile (e.g., auth.uid == userId).
     * @allow (create) Authenticated user creating their own profile (e.g., auth.uid == userId).
     * @allow (update) Authenticated user updating their own profile (e.g., auth.uid == userId).
     * @deny (get) Authenticated user requesting another user's profile (e.g., auth.uid != userId).
     * @deny (create) Authenticated user creating a profile with a mismatched uid (e.g., auth.uid != userId).
     * @deny (update) Authenticated user attempting to modify another user's profile (e.g., auth.uid != userId).
     * @deny (delete) No users should be able to delete profile via the rules.
     * @principle Enforces document ownership for reads and writes. Validates relational integrity between path and document data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Secures payment records. Only admins and petugas can create, update, or delete payment records. All authenticated users can read.
     * @path /payments/{paymentId}
     * @allow (get) Authenticated user reading a payment record.
     * @allow (list) Authenticated user listing payment records.
     * @allow (create) Admin or petugas creating a payment record.
     * @allow (update) Admin or petugas updating a payment record.
     * @allow (delete) Admin or petugas deleting a payment record.
     * @deny (create) Non-admin/petugas attempting to create a payment record.
     * @deny (update) Non-admin/petugas attempting to update a payment record.
     * @deny (delete) Non-admin/petugas attempting to delete a payment record.
     * @principle Enforces role-based access control.
     */
    match /payments/{paymentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isPetugas());
      allow update: if isSignedIn() && (isAdmin() || isPetugas());
      allow delete: if isSignedIn() && (isAdmin() || isPetugas());
    }

    /**
     * @description Secures meter readings. Only admins and petugas can create, update, or delete meter readings. All authenticated users can read.
     * @path /meterReadings/{readingId}
     * @allow (get) Authenticated user reading a meter reading.
     * @allow (list) Authenticated user listing meter readings.
     * @allow (create) Admin or petugas creating a meter reading.
     * @allow (update) Admin or petugas updating a meter reading.
     * @allow (delete) Admin or petugas deleting a meter reading.
     * @deny (create) Non-admin/petugas attempting to create a meter reading.
     * @deny (update) Non-admin/petugas attempting to update a meter reading.
     * @deny (delete) Non-admin/petugas attempting to delete a meter reading.
     * @principle Enforces role-based access control.
     */
    match /meterReadings/{readingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isPetugas());
      allow update: if isSignedIn() && (isAdmin() || isPetugas());
      allow delete: if isSignedIn() && (isAdmin() || isPetugas());
    }

     // Secure role definitions
    match /roles/{roleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
  }

  function isPetugas() {
    return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'petugas';
  }
}