/**
 * @fileoverview Firestore Security Rules for Water Meter App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * and restricts write access to meter readings and payments based on user roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Each user can only read/write their own profile.
 * - /payments/{paymentId}: Stores payment records. Only admins and petugas can create, update, and delete payments. Users can only read.
 * - /meterReadings/{readingId}: Stores meter readings. Only admins and petugas can create, update, and delete meter readings. Users can only read.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information harvesting.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization.
 *
 * Role Definitions:
 *  - admin: Has full access to all data.
 *  - petugas: Can create, update, and delete meter readings and payments.
 *  - user: Can only read meter readings and payments, and manage their own profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile.
     * @allow (get, update, delete) User 'user_abc' can read/update/delete their own profile.
     * @deny (create, update, delete) User 'user_xyz' cannot modify user 'user_abc' profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to payment records.
     * @path /payments/{paymentId}
     * @allow (get, list) Any authenticated user can read payment records.
     * @allow (create, update, delete) Only admins and petugas can create, update, and delete payment records.
     * @deny (create, update, delete) Regular users cannot modify payment records.
     * @principle Restricts write access to payment records based on user role.
     */
    match /payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        function isPetugas() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'petugas';
        }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isPetugas());
      allow update: if isSignedIn() && (isAdmin() || isPetugas());
      allow delete: if isSignedIn() && (isAdmin() || isPetugas());
    }

    /**
     * @description Controls access to meter reading records.
     * @path /meterReadings/{readingId}
     * @allow (get, list) Any authenticated user can read meter reading records.
     * @allow (create, update, delete) Only admins and petugas can create, update, and delete meter reading records.
     * @deny (create, update, delete) Regular users cannot modify meter reading records.
     * @principle Restricts write access to meter reading records based on user role.
     */
    match /meterReadings/{readingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      function isPetugas() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'petugas';
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isPetugas());
      allow update: if isSignedIn() && (isAdmin() || isPetugas());
      allow delete: if isSignedIn() && (isAdmin() || isPetugas());
    }
  }
}