/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and restricts access to payment and meter reading data based on user roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user themselves can read/write their profile.
 * - /payments/{paymentId}: Stores payment records. No specific access control implemented in this phase.
 * - /meterReadings/{readingId}: Stores water meter readings. No specific access control implemented in this phase.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Listing of users is forbidden to protect user privacy.
 * - In this prototype, payments and meter readings have no specific authorization, but MUST NOT have open write rules.
 *
 * Denormalization for Authorization:
 * - The `uid` is stored both in the document and in the path. This redundancy is validated on create and enforced on update to ensure the path and document are always in sync.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can get, update, and delete their own profile if the userId matches their auth UID.
     * @deny (create) Authenticated user cannot create a profile with a userId that does not match their auth UID.
     * @deny (get, update, delete) Authenticated user cannot get, update, or delete another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Controls access to payment documents.
     * @path /payments/{paymentId}
     * @allow (get, list) Public read access is allowed for payments.
     * @deny (create, update, delete) No specific authorization is implemented.
     * @principle Placeholder for access control on payments.
     */
    match /payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add payment creation and modification rules based on roles or ownership.
    }

    /**
     * @description Controls access to meter reading documents.
     * @path /meterReadings/{readingId}
     * @allow (get, list) Public read access is allowed for meter readings.
     * @deny (create, update, delete) No specific authorization is implemented.
     * @principle Placeholder for access control on meter readings.
     */
    match /meterReadings/{readingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add meter reading creation and modification rules based on roles or ownership.
    }
  }
}