/**
 * @fileoverview Firestore Security Rules for Water Management App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model combined with user-ownership for data privacy.
 * Users can only read and modify their own profile data, while 'admin' and 'petugas' roles have elevated privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Each document is keyed by the user's UID.
 * - /payments/{paymentId}: Stores payment records. Each document contains a 'residentId' field linking it to a user.
 * - /meterReadings/{readingId}: Stores meter reading records. Each document contains a 'residentId' field linking it to a user.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - The `isAdmin()` and `isPetugas()` functions fetch user roles from the `/users/{userId}` collection.  This requires `get` access to user documents.
 * - Data validation is relaxed to facilitate rapid prototyping.  Only authorization-critical fields (e.g., `residentId`) are validated.
 *
 * Denormalization for Authorization:
 * - The 'payments' and 'meterReadings' collections rely on the 'residentId' field to determine ownership, avoiding the need for complex queries to determine access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isPetugas() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'petugas';
    }

    function isAdminOrPetugas() {
      return isAdmin() || isPetugas();
    }

    function isResident(residentId) {
      return request.auth.uid == residentId;
    }

    function isPaymentOwner(residentId) {
      return request.auth.uid == residentId;
    }
    function isMeterReadingOwner(residentId) {
      return request.auth.uid == residentId;
    }
    
    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Controls access to user profile information (/users/{userId}).
     * @path /users/{userId}
     * @allow (get) User with UID 'user123' can read their own profile: auth.uid == 'user123'
     * @allow (get) Admin user can read any user profile.
     * @deny (get) User with UID 'user123' cannot read profile of user 'user456'.
     * @deny (create) Unauthorized user cannot create a profile.
     * @principle Enforces document ownership for writes, allows admin override.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdminOrPetugas());
      allow list: if isSignedIn() && isAdminOrPetugas();
      allow create: if isSignedIn() && (
        // owner can create their own profile with required fields and role 'user'
        (
          isOwner(userId) &&
          request.resource.data.keys().hasAll(['fullName','houseNumber','meterId','role']) &&
          request.resource.data.role == 'user' &&
          request.resource.data.fullName is string && request.resource.data.fullName.size() > 0 &&
          request.resource.data.houseNumber is string && request.resource.data.houseNumber.size() > 0 &&
          request.resource.data.meterId is string && request.resource.data.meterId.size() > 0
        ) ||
        // admin can create profiles for others, but role must be strictly 'user'
        (
          isAdmin() && !isOwner(userId) &&
          request.resource.data.keys().hasAll(['fullName','houseNumber','meterId','role']) &&
          request.resource.data.role == 'user' &&
          request.resource.data.fullName is string && request.resource.data.fullName.size() > 0 &&
          request.resource.data.houseNumber is string && request.resource.data.houseNumber.size() > 0 &&
          request.resource.data.meterId is string && request.resource.data.meterId.size() > 0
        )
      );
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Controls access to payment records (/payments/{paymentId}).
     * @path /payments/{paymentId}
     * @allow (get) Resident with residentId 'user123' can read their own payment record.
     * @allow (get) Admin or petugas can read any payment record.
     * @deny (get) User who is not the resident or admin/petugas cannot read the payment record.
     * @deny (create) User cannot create a payment record unless they are an admin/petugas.
     * @principle Implements role-based access control for payments, allowing residents to view their own records and admins/petugas to manage all records.
     */
    match /payments/{paymentId} {
      allow get: if isSignedIn() && (isPaymentOwner(resource.data.residentId) || isAdminOrPetugas());
      allow list: if false;
      allow create: if isSignedIn() && isAdminOrPetugas();
      allow update: if isSignedIn() && (isAdminOrPetugas() || isPaymentOwner(resource.data.residentId));
      allow delete: if isSignedIn() && (isAdminOrPetugas() || isPaymentOwner(resource.data.residentId));
    }

    /**
     * @description Controls access to meter reading records (/meterReadings/{readingId}).
     * @path /meterReadings/{readingId}
     * @allow (get) Resident with residentId 'user123' can read their own meter reading.
     * @allow (get) Admin or petugas can read any meter reading.
     * @deny (get) User who is not the resident or admin/petugas cannot read the meter reading.
     * @deny (create) User cannot create a meter reading unless they are an admin/petugas.
     * @principle Implements role-based access control for meter readings, allowing residents to view their own readings and admins/petugas to manage all readings.
     */
    match /meterReadings/{readingId} {
      // Admin & petugas can get/list all readings
      allow get: if isSignedIn() && isAdminOrPetugas();
      allow list: if isSignedIn() && isAdminOrPetugas();

      // Create: admin or petugas may record a reading
      // Validate fields and ensure recordedBy matches caller
      allow create: if isSignedIn() && isAdminOrPetugas() &&
        request.resource.data.keys().hasAll(['residentId','reading','month','year','recordedBy','recordedAt']) &&
        request.resource.data.recordedBy == request.auth.uid &&
        request.resource.data.residentId is string && request.resource.data.residentId.size() > 0 &&
        request.resource.data.reading is number && request.resource.data.reading >= 0 &&
        request.resource.data.month is number && request.resource.data.month >= 1 && request.resource.data.month <= 12 &&
        request.resource.data.year is number && request.resource.data.year >= 2020;

      // Update/Delete: admin only
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}