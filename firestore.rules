/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model where users can only access their own profile data, 
 * administrators have full access, and specific roles ('petugas') can manage meter readings. Payments are generally open 
 * for reading, but restricted to admins or the record owner for modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Access is restricted to the user themselves (owner) or admins.
 * - /payments/{paymentId}: Stores payment records. Readable by everyone, but create/update/delete restricted to admins or the residentId of the payment
 * - /meterReadings/{readingId}: Stores meter readings. Readable by everyone, writable by petugas or admins
 *
 * Key Security Decisions:
 * - User listing is completely disabled. This is a security best practice to prevent enumeration of user accounts.
 * - The 'Payment' and 'MeterReading' collections are top-level, requiring careful consideration of read/write access.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` includes a `role` field, allowing us to avoid separate role lookup calls and implement
 *   role-based access control directly in the rules.
 * - The `Payment` includes a `residentId` field which is compared to request.auth.uid to ensure owner access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get) User can read their own profile data. Admin can read all profiles
     * @allow (update) User can update their own profile data. Admin can update all profiles
     * @allow (delete) Admin can delete any profile
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership and restricts user listing.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isAdmin() {
              return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
        allow get: if isOwner(userId) || isAdmin();
        allow list: if false;
        allow create: if isOwner(userId) && request.resource.data.uid == userId;
        allow update: if (isOwner(userId) && request.resource.data.uid == userId) || isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Manages payment records.
     * @path /payments/{paymentId}
     * @allow (get, list) Any user can view all payment records.
     * @allow (create) Only admins can create payment records
     * @allow (update) Only admins or the record owner can update the record
     * @allow (delete) Only admins can delete payment records.
     * @principle Allows public read access but restricts writes to authorized users.
     */
    match /payments/{paymentId} {
      function isAdmin() {
              return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isRecordOwner(residentId) {
              return request.auth.uid == residentId;
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() || (resource != null && isRecordOwner(resource.data.residentId));
      allow delete: if isAdmin();
    }

    /**
     * @description Manages meter reading records.
     * @path /meterReadings/{readingId}
     * @allow (get, list) Any user can view all meter reading records.
     * @allow (create) Only petugas or admins can create meter reading records.
     * @allow (update) Only petugas or admins can update meter reading records.
     * @allow (delete) Only admins can delete meter reading records.
     * @principle Allows public read access but restricts writes to authorized users.
     */
    match /meterReadings/{readingId} {
        function isPetugas() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'petugas';
        }
        function isAdmin() {
              return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get, list: if true;
        allow create: if isPetugas() || isAdmin();
        allow update: if isPetugas() || isAdmin();
        allow delete: if isAdmin();
    }
  }
}