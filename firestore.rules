/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Each user can only read and write their own profile data.
 *
 * Data Structure:
 * User profile data is stored under the `/users/{userId}` path.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profile.
 * - Listing all user profiles is denied to prevent information disclosure.
 *
 * Denormalization for Authorization:
 *  - The `userId` path parameter is used to enforce ownership, avoiding the need for additional reads or complex role-based checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their own profile if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their own profile if request.auth.uid == 'user123'.
     * @allow (delete) - User with UID 'user123' can delete their own profile if request.auth.uid == 'user123' and the document exists.
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the profile of 'user123'.
     * @deny (update) - User with UID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) - User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}