/**
 * @fileoverview Firestore Security Rules for the Water Meter App.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles,
 * allowing users to manage their own data. Payment and meter reading data are publicly accessible but writes must be performed by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the user themselves.
 * - /payments/{paymentId}: Stores payment records.
 * - /meterReadings/{readingId}: Stores meter readings.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The rules do not validate the complete schema of the data being written, focusing only on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  N/A - The current ruleset does not implement Denormalization for Authorization.
 *
 * Structural Segregation:
 *  N/A - The current ruleset does not implement Structural Segregation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring users can only access their own profile.
     * @path /users/{userId}
     * @allow (create) - A user with UID 'user123' can create their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get) - A user with UID 'user123' can read their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (update) - A user with UID 'user123' can update their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (delete) - A user with UID 'user123' can delete their profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create) - A user with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - A user with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - A user with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - A user with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages payment data.
     * @path /payments/{paymentId}
     * @allow (get) - Any authenticated user can get a payment.
     * @allow (list) - Any authenticated user can list payments.
     * @allow (create) - Any authenticated user can create a payment.
     * @allow (update) - Any authenticated user can update a payment.
     * @allow (delete) - Any authenticated user can delete a payment.
     * @principle Allows any authenticated user to manage payment records.
     */
    match /payments/{paymentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages meter reading data.
     * @path /meterReadings/{readingId}
     * @allow (get) - Any authenticated user can get a meter reading.
     * @allow (list) - Any authenticated user can list meter readings.
     * @allow (create) - Any authenticated user can create a meter reading.
     * @allow (update) - Any authenticated user can update a meter reading.
     * @allow (delete) - Any authenticated user can delete a meter reading.
     * @principle Allows any authenticated user to manage meter reading records.
     */
    match /meterReadings/{readingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource and that the resource exists.
     * @param {string} userId The user ID to compare with the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}