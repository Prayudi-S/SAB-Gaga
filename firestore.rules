/**
 * @fileoverview Firestore Security Rules for the Water Management App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, allowing each user to read and write their own profile data.
 * Payments and meter readings are publicly readable but can only be created, updated, or deleted by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /payments/{paymentId}: Stores payment records.
 * - /meterReadings/{readingId}: Stores water meter readings.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Payments and meter readings can be read by anyone, but writes are restricted to authenticated users.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` entity uses the `uid` field as the document ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId) - Allows a signed-in user to read their own profile.
     * @allow (create) if isSignedIn() && isOwner(userId) - Allows a signed-in user to create their own profile.
     * @allow (update) if isSignedIn() && isOwner(userId) - Allows a signed-in user to update their own profile.
     * @allow (delete) if isSignedIn() && isOwner(userId) - Allows a signed-in user to delete their own profile.
     * @deny (get, list) if !isSignedIn() || !isOwner(userId) - Denies access to profile for non-signed-in users or other users.
     * @deny (create) if !isSignedIn() || !isOwner(userId) - Denies profile creation for non-signed-in users or other users.
     * @deny (update) if !isSignedIn() || !isOwner(userId) - Denies profile update for non-signed-in users or other users.
     * @deny (delete) if !isSignedIn() || !isOwner(userId) - Denies profile deletion for non-signed-in users or other users.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to payment documents.
     * @path /payments/{paymentId}
     * @allow (get, list) if true - Allows anyone to read payment records.
     * @allow (create) if isSignedIn() - Allows signed-in users to create payment records.
     * @allow (update) if isSignedIn() - Allows signed-in users to update payment records.
     * @allow (delete) if isSignedIn() - Allows signed-in users to delete payment records.
     * @deny (create) if !isSignedIn() - Denies payment record creation for non-signed-in users.
     * @deny (update) if !isSignedIn() - Denies payment record update for non-signed-in users.
     * @deny (delete) if !isSignedIn() - Denies payment record deletion for non-signed-in users.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /payments/{paymentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to meter reading documents.
     * @path /meterReadings/{readingId}
     * @allow (get, list) if true - Allows anyone to read meter reading records.
     * @allow (create) if isSignedIn() - Allows signed-in users to create meter reading records.
     * @allow (update) if isSignedIn() - Allows signed-in users to update meter reading records.
     * @allow (delete) if isSignedIn() - Allows signed-in users to delete meter reading records.
     * @deny (create) if !isSignedIn() - Denies meter reading record creation for non-signed-in users.
     * @deny (update) if !isSignedIn() - Denies meter reading record update for non-signed-in users.
     * @deny (delete) if !isSignedIn() - Denies meter reading record deletion for non-signed-in users.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /meterReadings/{readingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}