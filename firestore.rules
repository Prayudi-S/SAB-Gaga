/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control system.
 *
 * Core Philosophy:
 *   - Access is determined by the user's 'role' field in their profile.
 *   - The 'admin' role has full access to all data.
 *   - Other roles have no access unless explicitly granted (not defined in the IR).
 *
 * Data Structure:
 *   - User profiles are stored in the `/users/{userId}` collection.
 *   - Payment records are stored in the `/payments/{paymentId}` collection.
 *   - Meter readings are stored in the `/meterReadings/{readingId}` collection.
 *
 * Key Security Decisions:
 *   - Only administrators can read, create, update, or delete any document in any collection.
 *   - This configuration prioritizes security by default denying access to non-admin users.
 *   - The rules are structured to be easily extended with more fine-grained permissions in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, accessible only to admins.
     * @path /users/{userId}
     * @allow (read, create, update, delete) if the user is an admin.
     * @deny (read, create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control; only admins can manage user profiles.
     */
    match /users/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages payment records, accessible only to admins.
     * @path /payments/{paymentId}
     * @allow (read, create, update, delete) if the user is an admin.
     * @deny (read, create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control; only admins can manage payment records.
     */
    match /payments/{paymentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages meter reading data, accessible only to admins.
     * @path /meterReadings/{readingId}
     * @allow (read, create, update, delete) if the user is an admin.
     * @deny (read, create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control; only admins can manage meter readings.
     */
    match /meterReadings/{readingId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Helper function to check if the user is an admin.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}